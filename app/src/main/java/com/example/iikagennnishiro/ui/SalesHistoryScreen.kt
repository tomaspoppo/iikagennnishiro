package com.example.iikagennnishiro.ui

import android.content.Context
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.iikagennnishiro.utils.getFilteredSalesData
import com.example.iikagennnishiro.utils.getCurrentSalesStartDate
import com.example.iikagennnishiro.utils.getCustomDateRange
import java.text.SimpleDateFormat
import java.util.*

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SalesHistoryScreen(navController: NavController) {
    val context = LocalContext.current
    val sharedPreferences = context.getSharedPreferences("SalesData", Context.MODE_PRIVATE)

    var salesData by remember { mutableStateOf(emptyMap<String, Pair<String, String>>()) }
    var salesStartDate by remember { mutableStateOf("") }
    var salesEndDate by remember { mutableStateOf("") }
    var customDateRange by remember { mutableStateOf<Pair<String, String>?>(null) }
    var isCustomEnabled by remember { mutableStateOf(false) }
    var currentPeriod by remember { mutableStateOf("Â£≤‰∏äÊúüÈñì: Êú™Ë®≠ÂÆö") } // üîπ ÁèæÂú®„ÅÆÂ£≤‰∏äÊúüÈñì„ÇíË°®Á§∫„Åô„ÇãÂ§âÊï∞

    // üîπ Â£≤‰∏ä„Éá„Éº„Çø„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞ÔºàÁîªÈù¢Ëµ∑ÂãïÊôÇÔºÜ„Éú„Çø„É≥Êäº‰∏ãÊôÇ„Å´‰ΩøÁî®Ôºâ
    fun fetchSalesData() {
        val today = SimpleDateFormat("yyyyÂπ¥MMÊúàddÊó•", Locale.JAPAN).format(Date())
        salesStartDate = getCurrentSalesStartDate(sharedPreferences, today)
        salesEndDate = sharedPreferences.getString("DefaultEndDate", "Êú™Ë®≠ÂÆö") ?: "Êú™Ë®≠ÂÆö"
        customDateRange = getCustomDateRange(sharedPreferences)
        isCustomEnabled = sharedPreferences.getBoolean("CustomEnabled", false)

        // üîπ Â£≤‰∏äÊúüÈñì„Çí UI „Å´Âç≥ÊôÇÂèçÊò†
        currentPeriod = if (isCustomEnabled && customDateRange != null) {
            "Â£≤‰∏äÊúüÈñì: ${customDateRange!!.first} ÔΩû ${customDateRange!!.second}"
        } else {
            "Â£≤‰∏äÊúüÈñì: $salesStartDate ÔΩû $salesEndDate"
        }

        // üîπ Â£≤‰∏ä„Éá„Éº„Çø„ÇíÂèñÂæó
        salesData = if (isCustomEnabled && customDateRange != null) {
            getFilteredSalesData(sharedPreferences, customDateRange!!)
        } else {
            getFilteredSalesData(sharedPreferences, Pair(salesStartDate, salesEndDate))
        }
    }

    // üîπ ÁîªÈù¢„ÅåÈñã„ÅÑ„Åü„Å®„Åç„Å´Â£≤‰∏äÊúüÈñì„ÇíË°®Á§∫ÔºÜ„Éá„Éº„ÇøÂèñÂæó
    LaunchedEffect(Unit) {
        fetchSalesData()
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Â£≤‰∏äÂ±•Ê≠¥", fontSize = 20.sp, color = Color.Black) },
                navigationIcon = {
                    IconButton(onClick = { navController.popBackStack() }) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Êàª„Çã", tint = Color.Black)
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(containerColor = Color.White)
            )
        },
        content = { padding ->
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .background(Color.White)
                    .padding(padding)
                    .padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Spacer(modifier = Modifier.height(8.dp))

                // üîπ ÁèæÂú®„ÅÆÂ£≤‰∏äÊúüÈñì„ÇíË°®Á§∫Ôºà„Éá„Éº„ÇøÊäΩÂá∫„Éú„Çø„É≥„ÅÆ‰∏äÔºâ
                Text(
                    text = currentPeriod,
                    fontSize = 16.sp,
                    color = Color.Black
                )

                Spacer(modifier = Modifier.height(8.dp))

                // üîπ „Éá„Éº„ÇøÊäΩÂá∫„Éú„Çø„É≥ÔºàÊâãÂãïÊõ¥Êñ∞Áî®Ôºâ
                Button(onClick = { fetchSalesData() }) {
                    Text("„Éá„Éº„ÇøÊäΩÂá∫", fontSize = 16.sp)
                }

                Spacer(modifier = Modifier.height(8.dp))

                // üîπ Â£≤‰∏ä„Éá„Éº„Çø„ÅÆË°®Á§∫ÔºàLazyColumnÔºâ
                LazyColumn(modifier = Modifier.fillMaxSize()) {
                    items(salesData.toList()) { (date, data) ->
                        Card(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 4.dp),
                            colors = CardDefaults.cardColors(containerColor = Color.LightGray)
                        ) {
                            Column(modifier = Modifier.padding(16.dp)) {
                                Text(text = date, fontSize = 18.sp, color = Color.Black)
                                Text(text = "Â£≤‰∏ä: ¬•${data.first}", fontSize = 16.sp, color = Color.Black)
                                Text(text = "Âä¥ÂÉçÊôÇÈñì: ${data.second}", fontSize = 16.sp, color = Color.Black)
                            }
                        }
                    }
                }
            }
        }
    )
}
